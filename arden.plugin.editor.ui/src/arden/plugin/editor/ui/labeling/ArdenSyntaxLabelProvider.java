/*
* generated by Xtext
*/
package arden.plugin.editor.ui.labeling;

import java.util.List;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import arden.plugin.editor.ardenSyntax.action_slot;
import arden.plugin.editor.ardenSyntax.data_slot;
import arden.plugin.editor.ardenSyntax.evoke_slot;
import arden.plugin.editor.ardenSyntax.knowledge_category;
import arden.plugin.editor.ardenSyntax.library_category;
import arden.plugin.editor.ardenSyntax.logic_slot;
import arden.plugin.editor.ardenSyntax.maintenance_category;
import arden.plugin.editor.ardenSyntax.mlm;
import arden.plugin.editor.ardenSyntax.mlmname_slot;
import arden.plugin.editor.ardenSyntax.scenario_slot;
import arden.plugin.editor.ardenSyntax.validation_category;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ArdenSyntaxLabelProvider extends DefaultEObjectLabelProvider {

    @Inject
    public ArdenSyntaxLabelProvider(AdapterFactoryLabelProvider delegate) {
        super(delegate);
    }

    String text(mlm module) {
        // check if mlmname element exists in module body
        List<mlmname_slot> nameSlots = EcoreUtil2.getAllContentsOfType(module, mlmname_slot.class);
        if (!nameSlots.isEmpty()) {
            // return its id or text
        	mlmname_slot nameSlot = nameSlots.get(0);

            String name = nameSlot.getMlmname();
            if(name == null || name.isEmpty()) {
            	name = nameSlot.getFilename();
            }
            if(name != null && !name.isEmpty()) {
            	return "MLM: " + name;
            }
        }
        return "Medical Logic Module";
    }

    // TODO image for modules in outline
    // String image(P_mlm module) {
    // return "Module.gif";
    // }

    String text(maintenance_category libraryCategory) {
        return "Maintenance";
    }

    String text(library_category libraryCategory) {
        return "Library";
    }

    String text(knowledge_category knowledgeCategory) {
        return "Knowledge";
    }
    
    String text(validation_category validationCategory) {
        return "validation";
    }

    String text(data_slot slot) {
        return "data";
    }

    String text(evoke_slot slot) {
        return "evoke";
    }

    String text(logic_slot slot) {
        return "logic";
    }

    String text(action_slot slot) {
        return "action";
    }
    
    String text(scenario_slot slot) {
    	String scenarioTerminal = slot.getScenario();
        return scenarioTerminal.substring(0, scenarioTerminal.length()-1);
    }

}
